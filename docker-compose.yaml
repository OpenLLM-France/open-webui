services:
  webui:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - WEBUI_AUTH=True
      - ENABLE_SIGNUP=True
      - DEFAULT_USER_ROLE=user
    volumes:
      - ./backend/open_webui:/app/backend/open_webui
      - open-webui-dev1:/app/backend/data
    ports:
      - "8080:8080" # Adjust this if your app exposes a different port
    healthcheck:
      test: [ "CMD", "curl", "-f", "--request", "POST", "http://webui:8080/queue/idle" ]
      interval: 1s
      timeout: 60s
      retries: 3
    depends_on:
      - redis

  litellm:
    image: ghcr.io/berriai/litellm:main-latest
    ports:
      - "4000:4000"
    volumes:
      - ./litellm/litellm-config.yaml:/app/config.yaml
    env_file:
      - .env
    command: >
      --config /app/config.yaml --port 4000 --num_workers 8 --detailed_debug
    depends_on:
      - postgres # Ensure the PostgreSQL service is started before litellm

  postgres:
    image: postgres:latest
    env_file:
      - .env
    volumes:
      - ./litellm/postgres_data:/var/lib/postgresql/data
    restart: always

  celery:
    build:
      context: .
      dockerfile: Dockerfile.celery
    environment:
      REDIS_HOST: redis
      CELERY_BROKER_URL: redis://redis:6379
      CELERY_RESULT_BACKEND: redis://redis:6379
    depends_on:
      - redis

    volumes:
      - ./app:/app/app
      - ./pytest.ini:/app/pytest.ini

    command: poetry run celery -A app.queue_manager worker --loglevel=info

  celery_worker:
    build: .
    command: poetry run celery -A app.celery_app worker --pool=solo -l INFO
    volumes:
      - .:/app
    environment:
      - PYTHONPATH=/app
      - REDIS_HOST=redis
      - DEBUG=true
      - TESTING=true
      - CELERY_BROKER_URL=redis://redis:6379
      - CELERY_RESULT_BACKEND=redis://redis:6379
    depends_on:
      - redis




  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data

    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
  


volumes:
  redis-data:
  open-webui-dev1:
  persistent_data:
